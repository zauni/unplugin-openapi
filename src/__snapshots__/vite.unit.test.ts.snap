// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`Vite plugin > should handle a JSON schema with a reference 1`] = `
"(function polyfill() {
  const relList = document.createElement("link").relList;
  if (relList && relList.supports && relList.supports("modulepreload")) {
    return;
  }
  for (const link of document.querySelectorAll('link[rel="modulepreload"]')) {
    processPreload(link);
  }
  new MutationObserver((mutations) => {
    for (const mutation of mutations) {
      if (mutation.type !== "childList") {
        continue;
      }
      for (const node of mutation.addedNodes) {
        if (node.tagName === "LINK" && node.rel === "modulepreload")
          processPreload(node);
      }
    }
  }).observe(document, { childList: true, subtree: true });
  function getFetchOpts(link) {
    const fetchOpts = {};
    if (link.integrity) fetchOpts.integrity = link.integrity;
    if (link.referrerPolicy) fetchOpts.referrerPolicy = link.referrerPolicy;
    if (link.crossOrigin === "use-credentials")
      fetchOpts.credentials = "include";
    else if (link.crossOrigin === "anonymous") fetchOpts.credentials = "omit";
    else fetchOpts.credentials = "same-origin";
    return fetchOpts;
  }
  function processPreload(link) {
    if (link.ep)
      return;
    link.ep = true;
    const fetchOpts = getFetchOpts(link);
    fetch(link.href, fetchOpts);
  }
})();
const api = {
  openapi: "3.0.0",
  info: {
    title: "My great API",
    description: "Great description",
    version: "1.0.0"
  },
  paths: {
    "/my/path": {
      get: {
        summary: "Some GET request",
        responses: {
          "200": {
            description: "Some response",
            content: {
              "application/json": {
                schema: {
                  type: "object",
                  properties: {
                    someKey: {
                      type: "string"
                    }
                  },
                  required: [
                    "someKey"
                  ]
                },
                example: {
                  someKey: "some value"
                }
              }
            }
          }
        }
      }
    }
  }
};
const root = document.getElementById("root");
if (root) {
  root.innerHTML = \`
		<pre><code data-testid="json">\${JSON.stringify(api, null, 2)}</code></pre>
	\`;
}
"
`;

exports[`Vite plugin > should handle a YAML schema with a reference 1`] = `
"(function polyfill() {
  const relList = document.createElement("link").relList;
  if (relList && relList.supports && relList.supports("modulepreload")) {
    return;
  }
  for (const link of document.querySelectorAll('link[rel="modulepreload"]')) {
    processPreload(link);
  }
  new MutationObserver((mutations) => {
    for (const mutation of mutations) {
      if (mutation.type !== "childList") {
        continue;
      }
      for (const node of mutation.addedNodes) {
        if (node.tagName === "LINK" && node.rel === "modulepreload")
          processPreload(node);
      }
    }
  }).observe(document, { childList: true, subtree: true });
  function getFetchOpts(link) {
    const fetchOpts = {};
    if (link.integrity) fetchOpts.integrity = link.integrity;
    if (link.referrerPolicy) fetchOpts.referrerPolicy = link.referrerPolicy;
    if (link.crossOrigin === "use-credentials")
      fetchOpts.credentials = "include";
    else if (link.crossOrigin === "anonymous") fetchOpts.credentials = "omit";
    else fetchOpts.credentials = "same-origin";
    return fetchOpts;
  }
  function processPreload(link) {
    if (link.ep)
      return;
    link.ep = true;
    const fetchOpts = getFetchOpts(link);
    fetch(link.href, fetchOpts);
  }
})();
const api = {
  openapi: "3.0.0",
  info: {
    title: "My great API",
    description: "Great description",
    version: "1.0.0"
  },
  paths: {
    "/my/path": {
      get: {
        summary: "Some GET request",
        responses: {
          "200": {
            description: "Some response",
            content: {
              "application/json": {
                schema: {
                  type: "object",
                  properties: {
                    someKey: {
                      type: "string"
                    }
                  },
                  required: [
                    "someKey"
                  ]
                },
                example: {
                  someKey: "some value"
                }
              }
            }
          }
        }
      }
    }
  }
};
const root = document.getElementById("root");
if (root) {
  root.innerHTML = \`
		<pre><code data-testid="yaml">\${JSON.stringify(api, null, 2)}</code></pre>
	\`;
}
"
`;
